#!/usr/bin/env bash

set -euo pipefail

print_help() {
    cat <<'EOF'
NAME
    tde - open workspaces with tmux

SYNOPSIS

        tde [OPTION...] [PROJECT_DIR...]

DESCRIPTION
    tde is a bash script that opens project directory workspaces, one workspace
    per tmux window. The number of tmux panes, each accompanied by optional
    launch commands, can be specified per workspace window.

    One or more project workspace windows can be specified using command-line
    arguments or in session configuration files. Workspace windows are
    assigned to a named tmux session (see --session option).

    For each project workspace directory:

        1. A new tmux window is created (see --window-name option).
        2. The optional tmux commands are sourced and executed (see
           TMUX COMMANDS FILE).
        3. Additional panes, if specified, are created (see --panes option).
        4. The window --layout option is applied.
        5. The pane --launch options are executed.
        6. The --focus option pane is selected.

    The first newly created workspace window is selected and the session is
    attached to the client terminal.

    If the session already exists then new workspace windows are appended to the
    existing set of windows.

OPTIONS
     -n, --dry-run
        Print tmux commands without doing anything. '999' is a dummy value for
        tmux window index numbers.

    -h, --help
        Print this text.

    -f, --focus PANE
        Focus pane number PANE (1..PANES). The default value is 1.

    -l, --launch PANE:COMMAND
        Execute a shell COMMAND in pane PANE of each project workspace window.
        PANE must be between 1 and the value specified by the --panes option.
        For example '3:lazyvim' executes the lazyvim command in pane 3.

    -L, --layout LAYOUT
        Assigns a tmux layout to project workspace windows. The default LAYOUT
        value is `main-vertical`.

    -p,--panes PANES
        The minimum number of panes created in the tmux window. PANES is 1..9.
        This option value defaults to 1. The actual number of panes is either
        PANES or the maximum --launch options PANE number, whichever is greater.
        For example, the following sets of options will all generate three-pane
        windows:

            --launch 3:ls
            --panes 3
            --panes 2 --launch 3:ls
            --panes 3 --launch 1:nvim

    -s, --session SESSION
        Specify the tmux session name. The --session option also sets the
        configuration file names, for example '--session monitor' would set the
        session configuration file name to 'monitor.tde' and the tmux commands
        file name to 'monitor.tmux'. The default session name is 'tde'. SESSION
        must begin with an alpha numeric character and can only contain only
        alphanumeric characters, dashes, underscores, or periods.

    -t, --tmux-commands TMUX_COMMANDS
        This option sets the tmux commands file name. For example the
        '--tmux-commands red' option sets the tmux commands file name to
        'red.tmux' (see TMUX COMMANDS FILES). TMUX_COMMANDS must begin with an
        alpha numeric character and can only contain only alphanumeric
        characters, dashes, underscores, or periods.

    -w, --window-name WINDOW_NAME
        Sets the tmux workspace window name. Defaults to the project directory's
        base name stripped of its file name extension and with period characters
        replaced with hyphens.

    -v, --verbose
        Print informational messages and tmux commands.

CONFIGURATION FILES
    There are two types of configuration files: session configuration files and
    tmux commands files.

    Configuration files are optional. The configuration files default directory
    location is $HOME/.config/tde/. A custom configuration files directory can
    be specified with the TDE_CONFIG_DIR environment variable.

SESSION CONFIGURATION FILE
    Session configuration files contain tde workspace window definitions and are
    sourced and executed when the corresponding session is created.

    Session configuration file names match either the host name
    ('<host-name>.tde') or the session name ('<session-name>.tde'). The host
    name takes precedence over the session name.

    A session configuration file specifies a set of project workspace windows,
    one per line, formatted like:

        [OPTION...] PROJECT_DIR

    The following tde options are valid in tde configuration files: --focus,
    --launch, --layout, --panes, --window-name. Omitted option values default to
    their command-line values.

    Default option values can be assigned by setting PROJECT_DIR to '-'. The
    option values in lines with PROJECT_DIR set to '-' become the new default option
    values for subsequently created windows.

    Blank lines and lines beginning with a '#' character are skipped.

    The following example session> configuration file line creates a
    tmux window with three panes in the ~/nixos-configurations working
    directory. The first pane runs nvim, the third pane runs lazygit:

        --panes 3 --launch 1:nvim --launch 3:lazygit ~/nixos-configurations

    The next example creates a tmux window called 'monitor' with three vertical
    equal-width panes: pane 1 in the first column; pane 2 in the second; pane 3.
    The first pane is a shell prompt; the second runs htop; the third runs
    iotop:

        -p 3 -l 2:htop -l '3:sudo iotop' -w monitor -L even-horizontal ~

TMUX COMMANDS FILE
    A tmux command file contains tmux commands; they are sourced and executed by
    the tmux 'source-file' command after a session window is created (see the
    tmux(1) man page).

    Unless overridden by the --tmux-commands option, the tmux commands file name
    match either the host name ('<host-name>.tmux') or the session name
    ('<session-name>.tmux'). The host name takes precedence over the session
    name.

    tmux command file names must match either the host name ('<host-name>.tmux')
    or the tmux commands option ('<tmux-commands-option>.tmux'). The host name takes
    precedence over the tmux commands name.

LAYOUTS
    tmux preset or custom layouts can be applied to project workspace windows
    with the --layout option (either on the command-line or in a tde
    configuration file).

    To create a custom tmux layout:

        1. Create the desired layout manually e.g. using tmux split horizontal
           (C-a %), split vertical (C-a "), spread panes evenly (C-a E) commands.
        2. Run the `tmux list-windows -F "#{window_layout}"` command to generate
           the custom layout; use this as the --layout option value.

    tmux automatically adjusts the size of the layout for the current window
    size.

    Additional tmux layout-related options can be included in tde .tmux
    configuration files.

    tmux layouts are documented in the tmux man(1) page.
EOF
}

# Environment variables
TMUX="${TMUX-}"

# Environment variables used for testing
TDE_TEST="${TDE_TEST-false}"
TDE_CURRENT_SESSION="${TDE_CURRENT_SESSION-}"
mapfile -t TDE_SESSIONS <<<"${TDE_SESSIONS-}" # Convert string list to array

# Command arguments
DRY_RUN=false
VERBOSE=false
PANES=1
FOCUS=1
SESSION="tde"
TMUX_COMMANDS=
WINDOW_NAME=
LAYOUT=main-vertical
LAUNCH_OPTS=()
PROJECT_DIRS=()
TDE_CONFIG_DIR="${TDE_CONFIG_DIR-}"

PROJECT_DEFS=() # Project workspaces (options and workspace directory)

write_error_msg() {
    echo "$(basename "$0"): error: $1" >&2
}

write_warning_msg() {
    echo "$(basename "$0"): warning: $1" >&2
}

write_verbose_msg() {
    if [[ "$VERBOSE" == true ]]; then
        echo "$(basename "$0"): $1" >&2
    fi
}

session_exists() {
    local session="$1"
    if [[ $DRY_RUN == true || $TDE_TEST == true ]]; then
        printf '%s\n' "${TDE_SESSIONS[@]}" | grep -qx "$session" # Check array contains session name
    else
        tmux has-session -t "$session" 2>/dev/null
    fi
}

# Print the name of the tmux session in the terminal or an empty string if not inside a tmux session.
current_session() {
    if [[ $TDE_TEST == true ]]; then
        echo "$TDE_CURRENT_SESSION"
    else
        [ -n "$TMUX" ] && tmux display-message -p '#S' || echo ""
    fi
}

# Attach session $1
attach_session() {
    local session="$1"
    if ! session_exists "$session"; then
        write_error_msg "session does not exist: '$session'"
        exit 1
    fi
    if [[ "$(current_session)" == "$session" ]]; then # Do nothing
        write_verbose_msg "skipping attachment: session '$session' is already current"
        return
    fi
    if [[ $TDE_TEST == true && -z "$TDE_CURRENT_SESSION" || -z "$TMUX" ]]; then # Not in tmux session
        tmux_cmd attach-session -t "$session"
        return
    fi
    write_warning_msg "refusing to attach nested tmux session '$session' inside tmux session '$(current_session)'"
}

# Print or execute tmux commands
tmux_cmd() {
    if [[ $DRY_RUN == true || $TDE_TEST == true ]]; then
        echo "tmux $*"
    else
        write_verbose_msg "tmux $*"
        tmux "$@"
    fi
}

# Generate window name from directory
get_window_name() {
    local dir="$1"
    basename "$(realpath "$dir")"
}

validate_panes() {
    local panes
    panes="$1"
    if ! [[ "$panes" =~ ^[1-9]$ ]]; then
        write_error_msg "invalid --panes option '$panes': must be between 1 and 9"
        exit 1
    fi
}

validate_focus() {
    local focus
    focus="$1"
    if ! [[ "$focus" =~ ^[1-9]$ ]]; then
        write_error_msg "invalid --focus option '$focus': must be between 1 and 9"
        exit 1
    fi
}

validate_session_name() {
    local name
    name="$1"
    if ! [[ "$name" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$ ]]; then
        write_error_msg "invalid --session option '$name': must begin with an alpha numberic character and can only contain only alphanumeric characters, dashes, underscores, or periods"
        exit 1
    fi
}

validate_tmux_commands_name() {
    local name
    name="$1"
    if ! [[ "$name" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$ ]]; then
        write_error_msg "invalid --tmux-commands option '$name': must begin with an alpha numberic character and can only contain only alphanumeric characters, dashes, underscores, or periods"
        exit 1
    fi
}

validate_layout() {
    local layout
    layout="$1"
    if [[ -z "$layout" ]]; then
        write_error_msg "invalid --layout option '$layout'"
        exit 1
    fi
}

validate_window_name() {
    local name
    name="$1"
    if ! [[ "$name" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        write_error_msg "invalid --window-name option '$name': must contain only alphanumeric characters, dashes, underscores, or periods"
        exit 1
    fi
}

# Parses and validates command arguments and append a '|' separated project definition to the PROJECT_DEFS array.
# Each definition is formatted like:'
# <focus>|<panes>|<launches>|<dir>
parse_project_def() {
    local line="$*"
    local args=()

    # Re-parse line into proper words with quotes honored
    eval "args=($line)"

    local panes=""
    local focus=""
    local layout=""
    local window_name=""
    local launches=()
    local dir=""

    while [[ ${#args[@]} -gt 0 ]]; do
        case "${args[0]}" in
        -p | --panes)
            panes="${args[1]}"
            validate_panes "$panes"
            args=("${args[@]:2}")
            ;;
        -f | --focus)
            focus="${args[1]}"
            validate_focus "$focus"
            args=("${args[@]:2}")
            ;;
        -l | --launch)
            launches+=("${args[1]}")
            args=("${args[@]:2}")
            ;;
        -L | --layout)
            layout="${args[1]}"
            validate_layout "$layout"
            args=("${args[@]:2}")
            ;;
        -w | --window-name)
            window_name="${args[1]}"
            validate_window_name "$window_name"
            args=("${args[@]:2}")
            ;;
        -?*)
            write_error_msg "unknown option in project definition: ${args[0]}"
            exit 1
            ;;
        *)
            if [[ -n "$dir" ]]; then
                write_error_msg "unknown option in project definition: '$dir'"
                exit 1
            fi
            dir="$(eval echo "${args[0]}")"
            args=("${args[@]:1}")
            ;;
        esac
    done

    dir=$(eval echo "$dir") # Expand ~ and $HOME

    PROJECT_DEFS+=("$layout|$focus|$window_name|$panes|$(
        IFS=$'\t'
        echo "${launches[*]}"
    )|$dir")
}

# Get a list of existing window names in a session
existing_windows() {
    if [[ $TDE_TEST == true ]]; then
        echo ""
    else
        local session="$1"
        tmux list-windows -t "$session" -F '#W' 2>/dev/null || true
    fi
}

# Get window index by window name in a session
window_index_by_name() {
    if [[ $DRY_RUN == true || $TDE_TEST == true ]]; then
        echo "999"
    else
        local session="$1"
        local win_name="$2"
        tmux list-windows -t "$session" -F '#I:#W' | awk -F: -v name="$win_name" '$2 == name {print $1}'
    fi
}

# The calculated number of panes is returned by reference in the second argument.
validate_launch_defs() {
    local launch_defs="$1" # A tab-separated list of launch option values
    local -n max_pane="$2"
    local panes=()
    local pane_num
    local command
    local launches
    local launch

    IFS=$'\t' read -ra launches <<<"$launch_defs"
    max_pane=1
    for launch in "${launches[@]}"; do

        if [[ "$launch" != *:* ]]; then
            write_error_msg "invalid --launch option '$launch'"
            exit 1
        fi

        pane_num="${launch%%:*}"
        command="${launch#*:}"

        if ! [[ "$pane_num" =~ ^[1-9]$ ]]; then
            write_error_msg "invalid --launch option '$launch': pane number must be between 1 and 9"
            exit 1
        fi

        for n in "${panes[@]}"; do
            if [[ $n -eq $pane_num ]]; then
                write_error_msg "duplicate pane number $pane_num in --launch options: '${launch_defs//$'\t'/, }'"
                exit 1
            fi
        done
        panes+=("$pane_num")

        if ((pane_num > max_pane)); then
            max_pane=$pane_num
        fi

    done
}

# Validate PROJECT_DEFS array of command arguments
validate_project_defs() {
    local def
    for def in "${PROJECT_DEFS[@]}"; do

        local layout focus window_name panes launch_defs dir
        IFS="|" read -r layout focus window_name panes launch_defs dir <<<"$def"

        local _=
        validate_launch_defs "$launch_defs" _

        if [[ -z "$dir" ]]; then
            write_error_msg "missing project directory: '$dir'"
            exit 1
        fi

        if [[ "$dir" != "-" && ! -d "$dir" ]]; then
            write_error_msg "project directory not found: '$dir'"
            exit 1
        fi

    done
}

# Execute a list of tab-separated <pane>:<command> launch commands
execute_launch_commands() {
    local session="$1"
    local win_index="$2"
    local launch_def="$3"

    local launches=()
    IFS=$'\t' read -ra launches <<<"$launch_def"
    local launch
    for launch in "${launches[@]}"; do
        local pane_num
        local command

        if [[ "$launch" == *:* ]]; then
            pane_num="${launch%%:*}"
            command="${launch#*:}"
        else
            write_error_msg "invalid --launch option '$launch'"
            exit 1
        fi
        tmux_cmd send-keys -t "$session:$win_index.$pane_num" -l "$command"
        tmux_cmd send-keys -t "$session:$win_index.$pane_num" Enter
    done
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    -n | --dry-run)
        DRY_RUN=true
        shift
        ;;
    -p | --panes)
        validate_panes "${2-}"
        PANES="$2"
        shift 2
        ;;
    -f | --focus)
        validate_focus "${2-}"
        FOCUS="$2"
        shift 2
        ;;
    -l | --launch)
        LAUNCH_OPTS+=("${2-}")
        shift 2
        ;;
    -L | --layout)
        validate_layout "${2-}"
        LAYOUT="$2"
        shift 2
        ;;
    -s | --session)
        validate_session_name "${2-}"
        SESSION="$2"
        shift 2
        ;;
    -t | --tmux-commands)
        validate_tmux_commands_name "${2-}"
        TMUX_COMMANDS="$2"
        shift 2
        ;;
    -w | --window-name)
        validate_window_name "${2-}"
        WINDOW_NAME="$2"
        shift 2
        ;;
    -h | --help)
        print_help
        exit 0
        ;;
    -v | --verbose)
        VERBOSE=true
        shift
        ;;
    -*)
        write_error_msg "unknown option: $1"
        exit 1
        ;;
    *)
        PROJECT_DIRS+=("$1")
        shift
        ;;
    esac
done

if [[ $DRY_RUN == true && $TDE_TEST == false ]]; then
    mapfile -t TDE_SESSIONS <<<"$(tmux list-sessions -F "#{session_name}" 2>/dev/null || echo "")"
fi

if [[ -n "$TDE_CONFIG_DIR" ]]; then
    conf_dir="${TDE_CONFIG_DIR}"
else
    conf_dir="${XDG_CONFIG_HOME:-$HOME/.config/tde}"
fi

if ! session_exists "$SESSION"; then
    # Read, parse and validate config file and append to PROJECT_DEFS
    conf_file="$conf_dir/${SESSION}.tde"
    if [[ -f "$conf_file" ]]; then
        write_verbose_msg "reading session configuration file '$conf_file'"
        while IFS= read -r line; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            parse_project_def "$line"
        done <"$conf_file"
    else
        write_verbose_msg "session configuration file '$conf_file' not found"
    fi
fi

# Append command-line PROJECT_DIRS to PROJECT_DEFS
for dir in "${PROJECT_DIRS[@]}"; do
    parse_project_def "$dir"
done

validate_project_defs

if [[ ${#PROJECT_DEFS[@]} -eq 0 ]] && ! session_exists "$SESSION"; then
    write_error_msg "no project directories specified"
    exit 1
fi

EXISTING_WINDOWS="$(existing_windows "$SESSION")"

# Create project workspace windows
FIRST_WIN_INDEX=""
for index in "${!PROJECT_DEFS[@]}"; do
    def="${PROJECT_DEFS[$index]}"
    IFS="|" read -r layout focus window_name panes launch_defs dir <<<"$def"

    if [[ "$dir" == "-" ]]; then
        if [[ -n "$layout" ]]; then
            LAYOUT="$layout"
        fi
        if [[ -n "$window_name" ]]; then
            WINDOW_NAME="$window_name"
        fi
        if [[ -n "$panes" ]]; then
            PANES="$panes"
        fi
        if [[ -n "$focus" ]]; then
            FOCUS="$focus"
        fi
        if [[ -n "$launch_defs" ]]; then
            IFS=$'\t' read -ra LAUNCH_OPTS <<<"$launch_defs"
        fi
        continue
    fi
    layout="${layout:-$LAYOUT}"
    window_name="${window_name:-$WINDOW_NAME}"
    focus="${focus:-$FOCUS}"
    panes="${panes:-$PANES}"

    if [[ -z "$launch_defs" ]]; then
        # Use command-line options in lieu of explicit launch defs
        save_ifs="$IFS"
        IFS=$'\t' launch_defs="${LAUNCH_OPTS[*]}" # Save/restore IFS beause it is executed in the current shell
        IFS="$save_ifs"
    fi

    validate_launch_defs "$launch_defs" max_launch_pane
    # shellcheck disable=SC2154
    if ((max_launch_pane > panes)); then
        panes=$max_launch_pane
        write_verbose_msg "number of panes increased to $max_launch_pane to accomodate launch options: '${launch_defs//$'\t'/, }'"
    fi

    if ((focus > panes)); then
        write_error_msg "invalid --focus option '$focus': must be between 1 and $panes"
        exit 1
    fi

    WIN_NAME="${window_name:-$(get_window_name "$dir")}"
    if ! session_exists "$SESSION"; then
        # Create session
        tmux_cmd new-session -d -s "$SESSION" -c "$dir" -n "$WIN_NAME"
        if [[ $DRY_RUN == true || $TDE_TEST == true ]]; then
            TDE_SESSIONS+=("$SESSION")
        fi
    else
        if grep -Fxq "$WIN_NAME" <<<"$EXISTING_WINDOWS"; then
            write_warning_msg "skipping duplicate window name: '$WIN_NAME'"
            continue
        fi
        tmux_cmd new-window -t "$SESSION:" -c "$dir" -n "$WIN_NAME"
    fi

    WIN_INDEX="$(window_index_by_name "$SESSION" "$WIN_NAME")"
    FIRST_WIN_INDEX="${FIRST_WIN_INDEX:=$WIN_INDEX}"

    tmux_cmd set-option -t "$SESSION:$WIN_INDEX" pane-base-index 1

    # Source and execute optional tmux window configuration file
    cmds="${TMUX_COMMANDS:-$SESSION}"
    tmux_cnds_file="$conf_dir/${cmds}.tmux"
    if [[ -f "$tmux_cnds_file" ]]; then
        tmux_cmd source-file -t "$SESSION:$WIN_INDEX" "$tmux_cnds_file"
    else
        if [[ -n "$TMUX_COMMANDS" ]]; then
            # --tmux-commands was explicitly defined so we expect to find the tmux command file.
            write_error_msg "tmux commands file '$tmux_cnds_file' not found"
            exit 1
        else
            write_verbose_msg "tmux commands file '$tmux_cnds_file' not found"
        fi
    fi

    for ((i = panes; i > 1; i--)); do
        tmux_cmd split-window -v -t "$SESSION:$WIN_INDEX" -c "$dir"
    done

    tmux_cmd select-layout -t "$SESSION:$WIN_INDEX" "$layout"
    execute_launch_commands "$SESSION" "$WIN_INDEX" "$launch_defs"
    tmux_cmd select-pane -t "$SESSION:$WIN_INDEX.$focus"
    EXISTING_WINDOWS+=$'\n'"$WIN_NAME" # Update so subsequent checks are accurate
done

if [[ -n "$FIRST_WIN_INDEX" ]]; then
    tmux_cmd select-window -t "$SESSION:$FIRST_WIN_INDEX"
fi

attach_session "$SESSION"
