#!/usr/bin/env bash

set -euo pipefail

print_help() {
    cat <<'EOF'
NAME
    tde - open project workspaces with tmux

SYNOPSIS

        tde [OPTION...] [PROJECT_DIR...]

DESCRIPTION
    tde is a bash script that opens project directory workspaces in separate
    tmux windows. The number of tmux panes and optional launch commands can be
    specified per workspace window.

    The project directory workspaces can be specified in optional configuration
    files or with commnand-line arguments.

    For each project workspace directory:

        1. A new tmux window is created (see --window-name option).
        2. The window is split into columns (see --columns option).
        3. If PANES is greater than COLUMNS then remaining panes are
           stacked vertically in the right-hand column.
        4. The focus pane is selected (see --focus option).

    The first newly created project window is selected and the session
    is attached to the client terminal.

OPTIONS
     -n, --dry-run
        Print tmux commands without doing anything. '999' is a dummy value for
        tmux window index numbers.

    -h, --help
        Print this text.

    -c, --config-file CONFIG_FILE
        Specify the path of a tde configuration file. If this option is not
        specified tde sources the optional '_default.conf' file followed by the
        optional '<session-name>.conf' file from the configuration files
        directory. See CONFIGURATION FILES.

    -f, --focus PANE
        Focus pane number PANE (1..PANES). The default value is 1.

    -l, --launch PANE:COMMAND
        Execute a shell COMMAND in pane PANE of each project workspace window.
        PANE must be between 1 and the value specified by the --panes option.
        For example '3:lazyvim' executes the lazyvim command in pane 3.

    -p,--panes PANES
        The number of panes created in the tmux window. PANES is 1..9. This
        option value defaults to 1. See also the --columns option.

    -t, --tmux-file TMUX_FILE
        Specify the path of a file containing tmux commands. TMUX_FILE is
        sourced and its commands executed immediately following tmux session
        creation. If this option is not specified tde sources the optional
        '_default.tmux' file followed by the optional '<session-name>.tmux' file
        from the configuration files directory.

    -s, --session SESSION_NAME
        Specify the tmux session name. The --session option determines the
        configuration file name, for example the '--session go-dev' command
        option would set configuration file name to 'go-dev.conf'. The default
        session name is 'tde'. SESSION_NAME must begin with an alpha numberic
        character and can only contain only alphanumeric characters, dashes,
        underscores, or periods.

    -w, --window-name WINDOW_NAME
        The tmux window name. Defaults to the project directory's base name
       minus its file name extension and with period characters
       replaced with hyphens.

    -x, --columns COLUMNS
        Split the tmux window into COLUMNS columns. COLUMNS is between 1 and
        PANES. The default option value is 1 (if PANES=1) or 2 (if PANES is 2 or
        greater).

    -v, --verbose
        Print tmux commands.

CONFIGURATION FILES
    A tde configuration file specifies a set of project workspace windows, one
    per line, formatted like:

        [OPTION...] PROJECT_DIR

    The following tde options are valid in configuration files: --focus,
    --launch, --panes, --window-name, --columns. Omitted option values default
    to their command-line values.

    Blank lines and lines beginning with a '#' character are skipped.

    The default configuration files directory follows XDG Base Directory
    conventions:

        ${XDG_CONFIG_HOME:-$HOME/.config}/tde/

    The following example configuration file line creates a tmux window with
    three panes in the ~/nixos-configurations working directory. The first pane
    runs nvim, the third pane runs lazygit:

        --panes 3 --launch 1:nvim --launch 3:lazygit ~/nixos-configurations

    The next example creates a tmux window called 'monitor' with four panes
    layed out in three columns: pane 1 in the first column; pane 2 in the
    second; panes 3 and 4 in the third. The first is a terminal; the second runs
    htop; the third runs iotop; the fourth runs nethogs:

        -x 3 -p 4 -l 2:htop -l '3:sudo iotop' -l '4:sudo nethogs' -w monitor ~
EOF
}

# Environment variables
TMUX="${TMUX-}"

# Environment variables used for testing
TDE_TEST="${TDE_TEST-false}"
TDE_CLIENT_COUNT="${TDE_CLIENT_COUNT-0}"
TDE_SESSION_CREATED=false
TDE_CONFIG_DIR="${TDE_CONFIG_DIR-}"

# Command arguments
DRY_RUN=
VERBOSE=
PANES=1
COLS=
FOCUS=1
CONFIG_FILE=
TMUX_FILE=
SESSION_NAME="tde"
WINDOW_NAME=
LAUNCH_OPTS=()
PROJECT_DIRS=()

PROJECT_DEFS=() # Project workspaces (options and workspace directory)

write_error_msg() {
    echo "$(basename "$0"): error: $1" >&2
}

write_warning_msg() {
    echo "$(basename "$0"): warning: $1" >&2
}

write_verbose_message() {
    if [[ -n "$VERBOSE" ]]; then
        echo "$(basename "$0"): $1" >&2
    fi
}

session_exists() {
    local session_name="$1"
    if [[ $TDE_TEST == true ]]; then
        [[ "$TDE_SESSION_CREATED" == true || "$TDE_CLIENT_COUNT" -gt 0 ]]
    else
        if [[ -n $DRY_RUN ]]; then
            tmux has-session -t "$session_name" 2>/dev/null || [[ "$TDE_SESSION_CREATED" == true ]]
        else
            tmux has-session -t "$session_name" 2>/dev/null
        fi
    fi
}

# Print the name of the tmux session in the terminal or an empty string if not inside a tmux session.
current_session() {
    if [[ $TDE_TEST == true ]]; then
        echo "$TMUX"
    else
        [ -n "$TMUX" ] && tmux display-message -p '#S' || echo ""
    fi
}

# Print number of client terminals attached to session $1
attached_client_count() {
    if [[ $TDE_TEST == true ]]; then
        echo "$TDE_CLIENT_COUNT"
    else
        tmux list-clients -t "$1" 2>/dev/null | wc -l
    fi
}

# Attach session $1
attach_session() {
    local session_name="$1"
    if [[ -z $DRY_RUN ]] && ! session_exists "$session_name"; then
        write_error_msg "session does not exist: '$session_name'"
        exit 1
    fi
    if [[ $(current_session) == "$session_name" ]]; then # Do nothing
        return
    fi
    if [[ -z $TMUX ]]; then
        local client_count
        client_count=$(attached_client_count "$session_name")
        if [[ $client_count -ne 0 ]]; then
            local msg
            msg="tmux session '$session_name' is attached to $client_count other client terminal"
            if [[ $client_count -ne 1 ]]; then
                msg="${msg}s"
            fi
            write_warning_msg "$msg"
        fi
        tmux_cmd attach-session -t "$session_name"
        return
    fi
    write_warning_msg "refusing to attach nested tmux session '$session_name' inside tmux session '$(current_session)'"
}

# Print or execute tmux commands
tmux_cmd() {
    if [[ -n "$DRY_RUN" || $TDE_TEST == true ]]; then
        echo "tmux $*"
    else
        write_verbose_message "info: tmux $*"
        tmux "$@"
    fi
}

# Generate window name from directory
get_window_name() {
    local dir="$1"
    basename "$(realpath "$dir")"
}

validate_panes() {
    local panes
    panes="$1"
    if ! [[ "$panes" =~ ^[1-9]$ ]]; then
        write_error_msg "invalid --panes option '$panes': must be between 1 and 9"
        exit 1
    fi
}

validate_focus() {
    local focus
    focus="$1"
    if ! [[ "$focus" =~ ^[1-9]$ ]]; then
        write_error_msg "invalid --focus option '$focus': must be between 1 and 9"
        exit 1
    fi
}

validate_columns() {
    local cols
    cols="$1"
    if ! [[ "$cols" =~ ^[1-9]$ ]]; then
        write_error_msg "invalid --columns option '$cols': must be between 1 and 9"
        exit 1
    fi
}

validate_session() {
    local name
    name="$1"
    if ! [[ "$name" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$ ]]; then
        write_error_msg "invalid --session option '$name': must begin with an alpha numberic character and can only contain only alphanumeric characters, dashes, underscores, or periods"
        exit 1
    fi
}

validate_window_name() {
    local name
    name="$1"
    if ! [[ "$name" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        write_error_msg "invalid --window-name option '$name': must contain only alphanumeric characters, dashes, underscores, or periods"
        exit 1
    fi
}

# Parses and validates command arguments and returns a '|' separated project defintion.
# Each definition is formatted like:'
# <focus>|<cols>|<panes>|<launches>|<dir>
parse_project_def() {
    local line="$*"
    local args=()

    # Re-parse line into proper words with quotes honored
    eval "args=($line)"

    local panes="$PANES"
    local focus="$FOCUS"
    local cols="$COLS"
    local window_name="$WINDOW_NAME"
    local launches=("${LAUNCH_OPTS[@]}")
    local dir=""

    while [[ ${#args[@]} -gt 0 ]]; do
        case "${args[0]}" in
        -p | --panes)
            panes="${args[1]}"
            validate_panes "$panes"
            args=("${args[@]:2}")
            ;;
        -f | --focus)
            focus="${args[1]}"
            validate_panes "$focus"
            args=("${args[@]:2}")
            ;;
        -l | --launch)
            launches+=("${args[1]}")
            args=("${args[@]:2}")
            ;;
        -x | --columns)
            cols="${args[1]}"
            validate_columns "$cols"
            args=("${args[@]:2}")
            ;;
        -w | --window-name)
            window_name="${args[1]}"
            validate_window_name "$window_name"
            args=("${args[@]:2}")
            ;;
        -*)
            write_error_msg "unknown option in project definition: ${args[0]}"
            exit 1
            ;;
        *)
            dir="$(eval echo "${args[0]}")"
            args=("${args[@]:1}")
            ;;
        esac
    done

    if [[ "$panes" -eq 1 ]]; then
        cols=${cols:-1}
    else
        cols=${cols:-2}
    fi
    dir=$(eval echo "$dir") # Expand ~ and $HOME

    PROJECT_DEFS+=("$focus|$window_name|$cols|$panes|$(
        IFS=$'\t'
        echo "${launches[*]}"
    )|$dir")
}

# Get a list of existing window names in a session
existing_windows() {
    if [[ $TDE_TEST == true ]]; then
        echo ""
    else
        local session="$1"
        tmux list-windows -t "$session" -F '#W' 2>/dev/null || true
    fi
}

# Get window index by window name in a session
window_index_by_name() {
    if [[ -n "$DRY_RUN" || $TDE_TEST == true ]]; then
        echo "999"
    else
        local session="$1"
        local win_name="$2"
        tmux list-windows -t "$session" -F '#I:#W' | awk -F: -v name="$win_name" '$2 == name {print $1}'
    fi
}

# Validate PROJECT_DEFS array of command arguments
validate_project_defs() {
    for def in "${PROJECT_DEFS[@]}"; do
        # echo "def: $def"
        IFS="|" read -r focus window_name cols panes launch_def dir <<<"$def"

        IFS=$'\t' read -ra launches <<<"$launch_def"
        for launch in "${launches[@]}"; do

            local pane_num
            local command

            if [[ "$launch" != *:* ]]; then
                write_error_msg "invalid --launch option '$launch'"
                exit 1
            fi

            pane_num="${launch%%:*}"
            command="${launch#*:}"

            if ! [[ "$pane_num" =~ ^[1-9]$ ]] || ((pane_num < 1 || pane_num > panes)); then
                write_error_msg "invalid --launch option pane number '$pane_num': must be between 1 and $panes"
                exit 1
            fi
        done

        if ((focus > panes)); then
            write_error_msg "invalid --focus option '$focus': must be between 1 and $panes"
            exit 1
        fi

        if ((cols > panes)); then
            write_error_msg "invalid --columns option '$cols': must be between 1 and $panes"
            exit 1
        fi

        if [[ -z "$dir" ]]; then
            write_error_msg "missing project directory: '$dir'"
            exit 1
        fi

        if [[ ! -d "$dir" ]]; then
            write_error_msg "project directory not found: '$dir'"
            exit 1
        fi

    done
}

# Execute launch commands in specified panes
execute_launch_commands() {
    local session_name="$1"
    local win_index="$2"
    local launch_def="$3"

    IFS=$'\t' read -ra launches <<<"$launch_def"
    for launch in "${launches[@]}"; do
        local pane_num
        local command

        if [[ "$launch" == *:* ]]; then
            pane_num="${launch%%:*}"
            command="${launch#*:}"
        else
            pane_num="1" # Default to pane 1
            command="$launch"
        fi
        tmux_cmd send-keys -t "$session_name:$win_index.$pane_num" -l "$command"
        tmux_cmd send-keys -t "$session_name:$win_index.$pane_num" Enter
    done
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    -n | --dry-run)
        DRY_RUN=true
        shift
        ;;
    -c | --config-file)
        CONFIG_FILE="${2-}"
        shift 2
        ;;
    -t | --tmux-file)
        TMUX_FILE="${2-}"
        shift 2
        ;;
    -p | --panes)
        validate_panes "${2-}"
        PANES="$2"
        shift 2
        ;;
    -f | --focus)
        validate_focus "${2-}"
        FOCUS="$2"
        shift 2
        ;;
    -l | --launch)
        LAUNCH_OPTS+=("${2-}")
        shift 2
        ;;
    -s | --session)
        validate_session "${2-}"
        SESSION_NAME="$2"
        shift 2
        ;;
    -x | --columns)
        validate_columns "${2-}"
        COLS="$2"
        shift 2
        ;;
    -w | --window-name)
        validate_window_name "${2-}"
        WINDOW_NAME="$2"
        shift 2
        ;;
    -h | --help)
        print_help
        exit 0
        ;;
    -v | --verbose)
        VERBOSE=true
        shift
        ;;
    -*)
        write_error_msg "unknown option: $1"
        exit 1
        ;;
    *)
        PROJECT_DIRS+=("$1")
        shift
        ;;
    esac
done

if [[ $TDE_TEST == true ]]; then
    conf_dir="${TDE_CONFIG_DIR}"
else
    conf_dir="${XDG_CONFIG_HOME:-$HOME/.config/tde}"
fi

if [[ -z "$CONFIG_FILE" ]]; then
    CONFIG_FILE="$conf_dir/${SESSION_NAME}.conf"
fi

if ! session_exists "$SESSION_NAME"; then
    # Read, parse and validate config files and append to PROJECT_DEFS
    for conf_file in "$conf_dir/_default.conf" "$CONFIG_FILE"; do
        if [[ -f "$conf_file" ]]; then
            while IFS= read -r line; do
                [[ -z "$line" || "$line" =~ ^# ]] && continue
                parse_project_def "$line"
            done <"$conf_file"
        else
            write_verbose_message "info: configuration file '$conf_file' not found"
        fi
    done
fi

# Append command-line PROJECT_DIRS to PROJECT_DEFS
for dir in "${PROJECT_DIRS[@]}"; do
    parse_project_def "$dir"
done

validate_project_defs

if [[ ${#PROJECT_DEFS[@]} -eq 0 ]]; then
    attach_session "$SESSION_NAME"
    exit
fi

EXISTING_WINDOWS="$(existing_windows "$SESSION_NAME")"

# Create project workspace windows
FIRST_WIN_INDEX=""
for index in "${!PROJECT_DEFS[@]}"; do
    def="${PROJECT_DEFS[$index]}"
    IFS="|" read -r focus window_name cols panes launch_def dir <<<"$def"
    WIN_NAME="${window_name:-$(get_window_name "$dir")}"
    if ! session_exists "$SESSION_NAME"; then
        # Create session
        tmux_cmd new-session -d -s "$SESSION_NAME" -c "$dir" -n "$WIN_NAME"
        if [[ -n "$DRY_RUN" || $TDE_TEST == true ]]; then
            TDE_SESSION_CREATED=true # So the session is not created again
        fi
        # Source and execute optional tmux command files
        if [[ -z "$TMUX_FILE" ]]; then
            TMUX_FILE="$conf_dir/${SESSION_NAME}.tmux"
        fi
        for tmux_file in "$conf_dir/_default.tmux" "$TMUX_FILE"; do
            if [[ -f "$tmux_file" ]]; then
                tmux_cmd source-file -t "$SESSION_NAME:" "$tmux_file"
            else
                write_verbose_message "info: tmux command file '$tmux_file' not found"
            fi
        done
    else
        if grep -Fxq "$WIN_NAME" <<<"$EXISTING_WINDOWS"; then
            write_warning_msg "duplicate project workspace name: '$WIN_NAME' exists in session '$SESSION_NAME', skipping"
            continue
        fi
        tmux_cmd new-window -t "$SESSION_NAME:" -c "$dir" -n "$WIN_NAME"
    fi
    WIN_INDEX="$(window_index_by_name "$SESSION_NAME" "$WIN_NAME")"
    tmux_cmd set-option -t "$SESSION_NAME:$WIN_INDEX" pane-base-index 1
    FIRST_WIN_INDEX="${FIRST_WIN_INDEX:=$WIN_INDEX}"

    if [[ $panes -gt 1 ]]; then
        for ((i = cols - 1; i > 0; i--)); do
            tmux_cmd split-window -h -t "$SESSION_NAME:$WIN_INDEX" -c "$dir" # Create pane to the right
        done
        for ((i = panes - cols; i > 0; i--)); do
            tmux_cmd split-window -v -t "$SESSION_NAME:$WIN_INDEX" -c "$dir" # Create pane below
        done
        tmux_cmd select-layout -E -t "$SESSION_NAME:$WIN_INDEX.1"     # Equalise pane widths
        tmux_cmd select-layout -E -t "$SESSION_NAME:$WIN_INDEX.$cols" # Equalise pane heights
    fi

    execute_launch_commands "$SESSION_NAME" "$WIN_INDEX" "$launch_def"
    tmux_cmd select-pane -t "$SESSION_NAME:$WIN_INDEX.$focus"
    EXISTING_WINDOWS+=$'\n'"$WIN_NAME" # Update so subsequent checks are accurate
done

if [[ -n "$FIRST_WIN_INDEX" ]]; then
    tmux_cmd select-window -t "$SESSION_NAME:$FIRST_WIN_INDEX"
fi

attach_session "$SESSION_NAME"
