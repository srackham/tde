#!/usr/bin/env bash

set -euo pipefail

print_help() {
    cat <<'EOF'
NAME
    tde - open project workspaces with tmux

SYNOPSIS

        tde [OPTION...] [PROJECT_DIR...]

DESCRIPTION
    `tde` is a bash script that opens project directory workspaces in separate
    tmux windows. The number of tmux panes and optional launch commands can be
    specified per workspace window.

    The project directory workspaces are specified in optional configuration files
    and with commnand-line arguments.

    For each project workspace directory:

    1. A new tmux window name is generated from the project directory's base name
       minus its file name extension and with remaining period characters
       replaced with hyphens.
    3. A new tmux window is created with the newly generated window name and
       the window start directory set to the project directory.
    5. If PANES is greater than 1 then pane 1 is split vertically creating a
       second pane.
    6. If PANES is greater than 2 then panes 3..PANES are created by splitting
       pane 2 horizontally.
    7. The left-hand pane (pane 1) is selected.

    Finally the first newly created project window is selected and the session
    is attached.

OPTIONS
    --dry-run, -n
        Print tmux commands without doing anything.

    --help, -h
        Print this text.

    -c, --config CONFIG_FILE
        Specify the path of the configuration file.

    -l, --launch PANE:COMMAND
        Execute shell COMMAND in pane PANE of each project workspace window.
        PANE must be between 1 and the value specified by the --panes option.
        For example '3:lazyvim' executes the lazyvim command in pane 3.

    -p,--panes=PANES
        Open window with PANES panes. PANES is 1..9. Pane 1 is positioned on the
        left hand side of the enclosing window; panes 2..PANES are arranged
        vertically on the right hand side. This option value defaults 1.

    -s, --session SESSION_NAME
        Specify the tmux session name. The --session option determines the
        configuration file name, for example the '--session go-dev' command
        option would set configuration file name to 'go-dev.conf`. The default
        session name is 'tde'.

CONFIGURATION FILES
    The New Session Mode configuration file specifies a set of project workspace
    windows, one per line, formatted like:

        [OPTION...] PROJECT_DIR

    If only a PROJECT_DIR is specified then the options default to the
    command-line options. Blank lines and lines beginning with a `#` character
    are skipped.

    The following example configuration file line creates a tmux window with
    three panes in the ~/nixos-configurations working directory, the first pane
    runs nvim, the third pane runs lazygit:

        --panes 3 --launch 1:nvim --launch 3:lazygit ~/nixos-configurations

    The default configuration file path follows XDG Base Directory conventions:

        ${XDG_CONFIG_HOME:-$HOME/.config}/tde/tde.conf
EOF
}

# Environment variables
TMUX="${TMUX-}"

# Environment variables used for testing
TDE_TEST="${TDE_TEST-false}"
TDE_SESSION_EXISTS="${TDE_SESSION_EXISTS-false}"
TDE_CONFIG_DIR="${TDE_CONFIG_DIR-}"

# Command arguments
DRY_RUN=
PANES=1
CONFIG_FILE=
SESSION_NAME="tde"
LAUNCH_OPTS=()
PROJECT_DIRS=()

PROJECT_DEFS=() # Project workspaces (options and workspace directory)

write_error_msg() {
    echo "$(basename "$0"): $1" >&2
}

session_exists() {
    local session_name="$1"
    if [[ $TDE_TEST == true ]]; then
        [[ "$TDE_SESSION_EXISTS" == true ]]
    else
        tmux has-session -t "$session_name" 2>/dev/null
    fi
}

# Print the name of the tmux session in the terminal or an empty string if not inside a tmux session.
current_session() {
    if [[ $TDE_TEST == true ]]; then
        echo "$TMUX"
    else
        [ -n "$TMUX" ] && tmux display-message -p '#S' || echo ""
    fi
}

attach_session() {
    local session_name="$1"
    if [[ -z $DRY_RUN ]] && ! session_exists "$session_name"; then
        write_error_msg "session does not exist: '$session_name'"
        exit 1
    fi
    if [[ $(current_session) == "$session_name" ]]; then # Do nothing
        return
    fi
    if [[ -z $TMUX ]]; then
        tmux_cmd attach-session -t "$session_name"
        return
    fi
    write_error_msg "warning: refusing to attach nested tmux session '$session_name' inside tmux session '$(current_session)'"
}

# Print or execute tmux commands
tmux_cmd() {
    if [[ -n "$DRY_RUN" || $TDE_TEST == true ]]; then
        echo "tmux $*"
    else
        tmux "$@"
    fi
}

# Generate window name from directory
window_name() {
    local dir="$1"
    basename "$dir"
}

# Function to parse a single project definition (used for both CLI and config file)
# Each definition is formatted like: `<panes>|<launches>|<dir>` where `<panes>` is the number of
# panes, `<launches>` is a tab-separated list of launch option values, `<dir>` is the workspace
# directory path.
parse_project_def() {
    local line="$*"
    local args=()

    # Re-parse line into proper words with quotes honored
    eval "args=($line)"

    local panes=""
    local launches=()
    local dir=""

    while [[ ${#args[@]} -gt 0 ]]; do
        case "${args[0]}" in
        -p | --panes)
            panes="${args[1]}"
            args=("${args[@]:2}")
            ;;
        -l | --launch)
            launches+=("${args[1]}")
            args=("${args[@]:2}")
            ;;
        -*)
            write_error_msg "unknown option in project definition: ${args[0]}"
            exit 1
            ;;
        *)
            dir="$(eval echo "${args[0]}")"
            args=("${args[@]:1}")
            ;;
        esac
    done

    # Directory-only entries are assigned command-line option values.
    if [ -z "$panes" ] && [ ${#launches[@]} -eq 0 ]; then
        panes="$PANES"
        launches=("${LAUNCH_OPTS[@]}")
    fi

    dir=$(eval echo "$dir") # Expand ~ and $HOME

    PROJECT_DEFS+=("${panes}|$(
        IFS=$'\t'
        echo "${launches[*]}"
    )|$dir")
}

# Get a list of existing window names in a session
existing_windows() {
    if [[ $TDE_TEST == true ]]; then
        echo ""
    else
        local session="$1"
        tmux list-windows -t "$session" -F '#W' 2>/dev/null || true
    fi
}

# Get window index by window name in a session
window_index_by_name() {
    if [[ -n "$DRY_RUN" || $TDE_TEST == true ]]; then
        echo "999"
    else
        local session="$1"
        local win_name="$2"
        tmux list-windows -t "$session" -F '#I:#W' | awk -F: -v name="$win_name" '$2 == name {print $1}'
    fi
}

# Validate PROJECT_DEFS array of command arguments
validate_project_defs() {
    for def in "${PROJECT_DEFS[@]}"; do
        IFS="|" read -r panes launch_def dir <<<"$def"

        IFS=$'\t' read -ra launches <<<"$launch_def"
        for launch in "${launches[@]}"; do

            local pane_num
            local command

            if [[ "$launch" != *:* ]]; then
                write_error_msg "invalid launch option '$launch'"
                exit 1
            fi

            pane_num="${launch%%:*}"
            command="${launch#*:}"

            if ! [[ "$pane_num" =~ ^[1-9]$ ]] || ((pane_num < 1 || pane_num > panes)); then
                write_error_msg "invalid launch option pane number '$pane_num'. Must be between 1 and $panes"
                exit 1
            fi
        done

        if [[ -z "$dir" ]]; then
            write_error_msg "missing project directory: '$dir'"
            exit 1
        fi

        if [[ ! -d "$dir" ]]; then
            write_error_msg "project directory not found: '$dir'"
            exit 1
        fi

    done
}

# Execute launch commands in specified panes
execute_launch_commands() {
    local session_name="$1"
    local win_index="$2"
    local launch_def="$3"

    IFS=$'\t' read -ra launches <<<"$launch_def"
    for launch in "${launches[@]}"; do
        local pane_num
        local command

        if [[ "$launch" == *:* ]]; then
            pane_num="${launch%%:*}"
            command="${launch#*:}"
        else
            pane_num="1" # Default to pane 1
            command="$launch"
        fi
        tmux_cmd send-keys -t "$session_name:$win_index.$pane_num" -l "$command"
        tmux_cmd send-keys -t "$session_name:$win_index.$pane_num" Enter
    done
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
    --dry-run | -n)
        DRY_RUN=true
        shift
        ;;
    -c | --config)
        CONFIG_FILE="$2"
        shift 2
        ;;
    -p | --panes)
        PANES="$2"
        if ! [[ "$PANES" =~ ^[1-9]$ ]]; then
            write_error_msg "PANES must be between 1 and 9"
            exit 1
        fi
        shift 2
        ;;
    -l | --launch)
        LAUNCH_OPTS+=("$2")
        shift 2
        ;;
    -s | --session)
        SESSION_NAME="$2"
        if ! [[ "$SESSION_NAME" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
            write_error_msg "SESSION_NAME must contain only alphanumeric characters, dashes, underscores, or periods: '$SESSION_NAME'"
            exit 1
        fi
        shift 2
        ;;
    --help | -h)
        print_help
        exit 0
        ;;
    -*)
        write_error_msg "unknown option: $1"
        exit 1
        ;;
    *)
        PROJECT_DIRS+=("$1")
        shift
        ;;
    esac
done

if [[ -z "$CONFIG_FILE" ]]; then
    if [[ $TDE_TEST == true ]]; then
        config_dir="${TDE_CONFIG_DIR}"
    else
        config_dir="${XDG_CONFIG_HOME:-$HOME/.config/tde}"
    fi
    CONFIG_FILE="$config_dir/${SESSION_NAME}.conf"
fi

if ! session_exists "$SESSION_NAME"; then
    # Read, parse and validate config file and append to PROJECT_DEFS
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS= read -r line; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            parse_project_def "$line"
        done <"$CONFIG_FILE"
    else
        write_error_msg "warning: configuration file '$CONFIG_FILE' not found"
    fi
fi

# Append command-line PROJECT_DIRS to PROJECT_DEFS
for dir in "${PROJECT_DIRS[@]}"; do
    parse_project_def "$dir"
done

validate_project_defs

if [[ ${#PROJECT_DEFS[@]} -eq 0 ]]; then
    attach_session "$SESSION_NAME"
    exit
fi

EXISTING_WINDOWS="$(existing_windows "$SESSION_NAME")"

# Create project workspace windows
FIRST_WIN_INDEX=""
for index in "${!PROJECT_DEFS[@]}"; do
    def="${PROJECT_DEFS[$index]}"
    IFS="|" read -r panes launch_def dir <<<"$def"
    WIN_NAME="$(window_name "$dir")"
    if ! session_exists "$SESSION_NAME"; then
        tmux_cmd new-session -d -s "$SESSION_NAME" -c "$dir" -n "$WIN_NAME"
        if [[ $TDE_TEST == true ]]; then
            TDE_SESSION_EXISTS=true # So the session is not created again
        fi
    else
        if grep -Fxq "$WIN_NAME" <<<"$EXISTING_WINDOWS"; then
            write_error_msg "duplicate project workspace name: '$WIN_NAME' exists in session '$SESSION_NAME', skipping"
            continue
        fi
        tmux_cmd new-window -t "$SESSION_NAME:" -c "$dir" -n "$WIN_NAME"
    fi
    WIN_INDEX="$(window_index_by_name "$SESSION_NAME" "$WIN_NAME")"
    FIRST_WIN_INDEX="${FIRST_WIN_INDEX:=$WIN_INDEX}"

    if [[ $panes -gt 1 ]]; then
        # Split vertically to create pane 2
        tmux_cmd split-window -h -t "$SESSION_NAME:$WIN_INDEX" -c "$dir"

        # Create additional panes 3.. in the right side by splitting horizontally
        for ((p = 3; p <= panes; p++)); do
            tmux_cmd split-window -t "$SESSION_NAME:$WIN_INDEX.2" -c "$dir"
        done
        tmux_cmd select-layout -E -t "$SESSION_NAME:$WIN_INDEX.2"
    fi

    execute_launch_commands "$SESSION_NAME" "$WIN_INDEX" "$launch_def"
    tmux_cmd select-pane -t "$SESSION_NAME:$WIN_INDEX.1"
    EXISTING_WINDOWS+=$'\n'"$WIN_NAME" # Update so subsequent checks are accurate
done

if [[ -n "$FIRST_WIN_INDEX" ]]; then
    tmux_cmd select-window -t "$SESSION_NAME:$FIRST_WIN_INDEX"
fi
attach_session "$SESSION_NAME"
